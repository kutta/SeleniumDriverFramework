package com.comverse.upm.financials;


	import org.junit.After;
import org.junit.Before;


	
	

	import com.comverse.upm.UpmBct.*;
import com.comverse.css.pos.*;
import com.comverse.css.common.*;
import com.comverse.upm.common.*;


	public class NCA_BIP_UPM_with_DB_backdating extends CSSSeleneseTestCase {

	    private StringBuffer broken_error = new StringBuffer();
	    private String bugId = "NoBug";
	    private String app = "";
	    private String version = "";
	    private String deployMode = "CV";
	    private String browser = "";
	    private String result = "fail";
	    private String accno = null;
//	    private String servid = null;

	    @Before
	    @Override
	    public void setUp() {
	        String htmlFileName = this.getClass().getSimpleName().toString();
	        super.setUp(htmlFileName);
	    }

	    
	    public void testNCA_BIP_UPM() throws Exception {
	        try {
	            Prep csrApplication = new Prep(selenium);
	            User myUser = new User(selenium);
	            Nca doNca = new Nca(selenium);
	            long ts = csrApplication.generateTimeStamp();

	            app = csrApplication.launchCSR();
	            version = csrApplication.getBuildNumber(app, this.getClass().getSimpleName().toString());
	            browser = csrApplication.getBrowserAgent();

	            myUser.loginCSRAdmin();
	            doNca.checkForExistingBasketAndDiscard();
	            doNca.startNCA("New Convergent Residential Customer");
	            doNca.enterIdentificationData(ts);
	            doNca.modifyAccountDetails();
	            doNca.reviewCustomerData();
	            doNca.chooseAccountBundles("Residential - Ultra Postpaid Bundle");
	            doNca.selectHandSet("");
	            doNca.enterSubscriptionDetails(ts);
	            doNca.selectOffersForYourSubscriber();
	            doNca.configureOffers();
	            doNca.configureBalance("GPRS WAP-INTERNET_limit", "1024");
	            doNca.selectThreeInventory();
	            doNca.checkMyBasketContent("Residential - Ultra Postpaid");
	            doNca.checkoutReview();
	            doNca.checkoutConfirmation(app);
	            accno = doNca.waitForAccountCreated(ts);
	            System.out.println("got account number " + accno);

	            /*These are the tables/fields that need to be backdated
	             * in order for BIP to pick up RCS charges and generate an Invoice
	             * (would need to be implemented pending fix for 
	             * CBS00134369 "Provide backdating option/parameter in CSS":
	             * 
	             * Backdate
	             * CMF, RC, RC_TERM_INST, RC_TAX, RC_BALANCE ,CHARGE_UNBILLED 
	             * on the date fields 
	             * 
	             * The function DBUtils.acctBackdate is currently set to backdate by 45 days
	             * (can change to a parameter)
	             * */
	             
	            
	            //CURRENTLY THIS IS RUNNING RCS AGAINST ALL 
	            //ACCOUNTS IN THE DB
	            //Need to replace this with a unix call
	            //to run_rcs instead
	            System.out.println("Invoking RCS batch via UPM against account number"+ accno);
	            UpmRunRcs RCS = new UpmRunRcs();
	            RCS.test_upm_bct_RCS_workflow(accno);
	            
	            System.out.println("Backdating account"+ accno);
	            DBUtils DBU= new DBUtils();
	            DBU.acctBackdate(accno);
	                      
	            
	            System.out.println("Invoking BIP via UPM against account number"+ accno);
	            UpmRunBip BIP = new UpmRunBip();
	            BIP.test_upm_bct_BIP_workflow(accno);
	            
	            
	            
	            result = "pass";
	        } catch (AlreadyRunException e) {
	        } catch (Exception e) {
	            broken_error.append(e.getMessage());
	            throw e;
	        }
	    }

	    @After
	    @Override
	    public void tearDown() {
	        //String result = super.testResult(broken_error);
	        String testId = this.getClass().getSimpleName().toString();
	        super.logResults(bugId, app, version, testId, result, deployMode, browser);
	        super.tearDown();
	    }

	}
