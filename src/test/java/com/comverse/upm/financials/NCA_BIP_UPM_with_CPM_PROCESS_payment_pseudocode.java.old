package com.comverse.upm.financials;

	

	import org.junit.After;
import org.junit.Before;


	
	

	import com.comverse.upm.UpmBct.*;
import com.comverse.upm.common.DBUtils;
import com.comverse.css.pos.*;
import com.comverse.css.common.*;


	public class NCA_BIP_UPM_with_CPM_PROCESS_payment_pseudocode extends CSSSeleneseTestCase {

	    private StringBuffer broken_error = new StringBuffer();
	    private String bugId = "NoBug";
	    private String app = "";
	    private String version = "";
	    private String deployMode = "CV";
	    private String browser = "";
	    private String result = "fail";
	    private String accno = null;
//	    private String servid = null;

	    @Before
	    @Override
	    public void setUp() {
	        String htmlFileName = this.getClass().getSimpleName().toString();
	        super.setUp(htmlFileName);
	    }

	    
	    public void testNCA_BIP_CPM_PROCESS_UPM() throws Exception {
	        try {
	            Prep csrApplication = new Prep(selenium);
	            User myUser = new User(selenium);
	            Nca doNca = new Nca(selenium);
	            long ts = csrApplication.generateTimeStamp();

	            app = csrApplication.launchCSR();
	            version = csrApplication.getBuildNumber(app, this.getClass().getSimpleName().toString());
	            browser = csrApplication.getBrowserAgent();

	            myUser.loginCSRAdmin();
	            doNca.checkForExistingBasketAndDiscard();
	            doNca.startNCA("New Convergent Residential Customer");
	            doNca.enterIdentificationData(ts);
	            doNca.modifyAccountDetails();
	            doNca.reviewCustomerData();
	            doNca.chooseAccountBundles("Residential - Ultra Postpaid Bundle");
	            doNca.selectHandSet("");
	            doNca.enterSubscriptionDetails(ts);
	            doNca.selectOffersForYourSubscriber();
	            doNca.configureOffers();
	            doNca.configureBalance("GPRS WAP-INTERNET_limit", "1024");
	            doNca.selectThreeInventory();
	            doNca.checkMyBasketContent("Residential - Ultra Postpaid");
	            doNca.checkoutReview();
	            doNca.checkoutConfirmation(app);
	            accno = doNca.waitForAccountCreated(ts);
	            System.out.println("got account number " + accno);

	            /*These are the tables/fields that need to be backdated
	             * in order for BIP to pick up RCS charges and generate an Invoice
	             * (would need to be implemented pending fix for 
	             * CBS00134369 "Provide backdating option/parameter in CSS":
	             * 
	             * Backdate
	             * CMF, RC, RC_TERM_INST, RC_TAX, RC_BALANCE ,CHARGE_UNBILLED 
	             * on the date fields 
	             * 
	             * The function DBUtils.acctBackdate is currently set to backdate by 45 days
	             * (can change to a parameter)
	             * */
	             
	            System.out.println("Backdating account"+ accno);
	            DBUtils DBU= new DBUtils();
	            DBU.acctBackdate(accno);
	                                  
	            
	            
	            
	            /*Pseudocode for processing an CPM 'POST' payment, assuming successfully generated invoice 
	             * Needed for exercising CCIU ported to CSS
	             * via DR-2-019-722: UIs to be ported to CSRP framework 
	             * 
	             * Overview:
	             * 
	             * 1) Create an account that uses Credit Card payment method.  You can select clearing house='KNN', and need to give valid credit card information, for example, Visa and 4000200030004004.
	             * 
	             * ***New methods will need to be created in src/com.comverse.css.pos.Nca.java
	             *   for populating Credit Card and Direct Debit payment method information.
	             *   
				   2)  Run BIP (call test_upm_bct_BIP_workflow(accno); done above--> creates a row in PAYMENT_TRANS with cc_trans_status=0 (waiting.) [done above]
				   3)  Run CPM in CREATE mode --> 
				       Call test_upm_bct_CPM_workflow("CREATE") --> creates a CPM 'Send' file in the arbor/ready directory (as defined in EXT_CONTACTS.arbor_ready) and sets PAYMENT_TRANS.cc_trans_status to 2 ('Sent').  This can be done using the script ~/CPM/sybase115/scripts/create1.
			       4)  Run COM (call test_upm_bct_COM_workflow)--> moves file from arbor/ready to remote/ready (from $ARBORDIR/data/cpm/send/ready  to ~/CPM/send/ready, as defined in EXT_LOCAL_DIR_ACCESS).
			        * Note:  to have COM work on the UPM node, using a UPM lite, need to do some workarounds
			        * e.g., update database_rg to host_rg in $JBOSS_HOME/process/workflows/batch.icfg.    
		           4.5) Call RepStat ALL (test_upm_bct_REPSTAT_workflow)
		           5)  Use a c utility called create_cpm_all to create a sample CPM return file that would be returned by the clearinghouse

The c utility is run using a wrapper script called 'dummy_run', the usage for which is
ssdp1:/staging/billing/TAI/process/CPM# dummy_run
Usage : <TRACK_ID> <FORMAT> <TYPE> <RESP_CD> <USER> <PASS>
             Formats: 1=CKF, 2=KNN, 3=FUS, 5=FDM ,7=F96
             Types:   1=rec, 2=res, 3=ret
             Resp codes: run response_codes for valid codes
sdp1:/staging/billing/TAI/process/CPM#


where <TRACK_ID> is the tracking_id in CARD_TRANS, <FORMAT> would be '2' for clearinghouse KNN,
 <TYPE> would be 1 for a successful response, and 
 <RESP_CD> refers to response codes that the clearinghouse can return, 
 configured in CCARD_RESPONSE_CODE_REF/VALUES.  
 
 For a successful KNN payment, the response code is configured as 'KN0'.
 For an errored payment, use 'KN01' (hard decline) or 'KN02' (soft decline).

Dummy_run  places it in the EXT_LOCAL_DIR_ACCESS remote/ready directory, for example ~/CPM/return/KNN/ready.

dummy_run can be found on 10.45.26.118, under /staging/billing/TAI/process/CPM.

Will need to retrieve the last track_id from CARD_TRANS after running bip.


6)  Run COM (call all test_upm_bct_COM_workflow)to move the file from Remote ready to Arbor results/ready, which would be $ARBORDIR/data/cpm/results/ready.
6.5) Run REPSTAT (call all test_upm_bct_REPSTAT_workflow)
7)  Run CPM (call all test_upm_bct_CPM_workflow("PROCESS") in PROCESS mode to process the return file and post the payment.  This moves the file from $ARBORDIR/data/cpm/results/ready to $ARBORDIR/data/cpm/results/done, sets PAYMENT_TRANS.cc_trans_status to 8 (if successful), or 4 for a rejected response code, and updates the BP tables to record the payment.  This can be run using the script ~/CPM/oracle117/scripts/process1.
	
	   * 
	   * Also see slides 43-69 of http://us-dnv-sp01/sites/SQPM/PQA/E2E/Reference%20Test%20Procedures/BP%20Module%20Test%20Procedures.ppt
	   * for reference
	   * */
	       
	            //CURRENTLY THIS IS RUNNING RCS AGAINST ALL 
	            //ACCOUNTS IN THE DB
	            //Need to replace this with a unix call
	            //to run_rcs instead
	            System.out.println("Invoking RCS batch via UPM against account number"+ accno);
	            UpmRunRcs RCS = new UpmRunRcs();
	            RCS.test_upm_bct_RCS_workflow(accno);
	            
	    System.out.println("Invoking BIP via UPM against account number"+ accno);
	    UpmRunBip BIP = new UpmRunBip();
	    BIP.test_upm_bct_BIP_workflow(accno);   
	    
	    System.out.println("Invoking CPM CREATE via UPM");
	    UpmRunCpm CPM = new UpmRunCpm();
	    CPM.test_upm_bct_CPM_workflow("CREATE");
	    
	    System.out.println("Invoking COM via UPM");
	    UpmRunCom COM = new UpmRunCom();
	    COM.test_upm_bct_com_workflow();
	    
	    System.out.println("Invoking RepStat ALL via UPM");
	    UpmRunRepStat REPSTAT = new UpmRunRepStat();
	    REPSTAT.test_upm_bct_RepStat_workflow("ALL");
	   
	    /* Need some code here to get the last track_id from CARD_TRANS
	     * and invoke dummy_run on 10.45.26.118 /staging/billing/TAI/process/CPM
	     * with appropriate Response Codes for successful or declined transactions
	     */ 
	    
	    System.out.println("Invoking COM after dummy)run via UPM");
	    COM.test_upm_bct_com_workflow();
	    
	    System.out.println("Invoking RepStat ALL via UPM");
	    REPSTAT.test_upm_bct_RepStat_workflow("ALL");
	    
	    System.out.println("Invoking CPM PROCESS via UPM");
	    CPM.test_upm_bct_CPM_workflow("PROCESS");
	    
/*	            result = "pass"; */
	        } catch (AlreadyRunException e) {
	        } catch (Exception e) {
	            broken_error.append(e.getMessage());
	            throw e;
	        }
	    }

	    @After
	    @Override
	    public void tearDown() {
	        //String result = super.testResult(broken_error);
	        String testId = this.getClass().getSimpleName().toString();
	        super.logResults(bugId, app, version, testId, result, deployMode, browser);
	        super.tearDown();
	    }

	}
