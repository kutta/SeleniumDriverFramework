package com.comverse.upm.financials;

	

	import org.junit.After;
import org.junit.Before;


	
	

	import com.comverse.upm.UpmBct.*;
import com.comverse.upm.common.DBUtils;
import com.comverse.css.pos.*;
import com.comverse.css.common.*;


	public class NCA_BIP_UPM_with_LBX_payment_pseudocode extends CSSSeleneseTestCase {

	    private StringBuffer broken_error = new StringBuffer();
	    private String bugId = "NoBug";
	    private String app = "";
	    private String version = "";
	    private String deployMode = "CV";
	    private String browser = "";
	    private String result = "fail";
	    private String accno = null;
//	    private String servid = null;

	    @Before
	    @Override
	    public void setUp() {
	        String htmlFileName = this.getClass().getSimpleName().toString();
	        super.setUp(htmlFileName);
	    }

	    
	    public void testNCA_BIP_UPM() throws Exception {
	        try {
	            Prep csrApplication = new Prep(selenium);
	            User myUser = new User(selenium);
	            Nca doNca = new Nca(selenium);
	            long ts = csrApplication.generateTimeStamp();

	            app = csrApplication.launchCSR();
	            version = csrApplication.getBuildNumber(app, this.getClass().getSimpleName().toString());
	            browser = csrApplication.getBrowserAgent();

	            myUser.loginCSRAdmin();
	            doNca.checkForExistingBasketAndDiscard();
	            doNca.startNCA("New Convergent Residential Customer");
	            doNca.enterIdentificationData(ts);
	            doNca.modifyAccountDetails();
	            doNca.reviewCustomerData();
	            doNca.chooseAccountBundles("Residential - Ultra Postpaid Bundle");
	            doNca.selectHandSet("");
	            doNca.enterSubscriptionDetails(ts);
	            doNca.selectOffersForYourSubscriber();
	            doNca.configureOffers();
	            doNca.configureBalance("GPRS WAP-INTERNET_limit", "1024");
	            doNca.selectThreeInventory();
	            doNca.checkMyBasketContent("Residential - Ultra Postpaid");
	            doNca.checkoutReview();
	            doNca.checkoutConfirmation(app);
	            accno = doNca.waitForAccountCreated(ts);
	            System.out.println("got account number " + accno);

	            /*These are the tables/fields that need to be backdated
	             * in order for BIP to pick up RCS charges and generate an Invoice
	             * (would need to be implemented pending fix for 
	             * CBS00134369 "Provide backdating option/parameter in CSS":
	             * 
	             * Backdate
	             * CMF, RC, RC_TERM_INST, RC_TAX, RC_BALANCE ,CHARGE_UNBILLED 
	             * on the date fields 
	             * 
	             * The function DBUtils.acctBackdate is currently set to backdate by 45 days
	             * (can change to a parameter)
	             * */
	             
	            System.out.println("Backdating account"+ accno);
	            DBUtils DBU= new DBUtils();
	            DBU.acctBackdate(accno);
	                 
	            //CURRENTLY THIS IS RUNNING RCS AGAINST ALL 
	            //ACCOUNTS IN THE DB
	            //Need to replace this with a unix call
	            //to run_rcs instead
	            System.out.println("Invoking RCS batch via UPM against account number"+ accno);
	            UpmRunRcs RCS = new UpmRunRcs();
	            RCS.test_upm_bct_RCS_workflow(accno);
	            
	            System.out.println("Invoking BIP via UPM against account number"+ accno);
	            UpmRunBip BIP = new UpmRunBip();
	            BIP.test_upm_bct_BIP_workflow(accno);
	            
	            /*Pseudocode for processing an LBX payment, assuming successfully generated invoice 
	             * Needed for exercising LIU ported to CSS
	             * via DR-2-019-722: UIs to be ported to CSRP framework 
	             * 
	             * Overview:
	             * 
	             * 1)  Create an LBX input file by calling /staging/billing/TAI/process/LBX/dummy_run (on 10.45.26.118)
	             * Usage is as follows.  
	             * Invoice Number, Amount, Ext ID will need to be retrieved
	             * From the database and passed as parameters.
	             * sdp1:/staging/billing/TAI/process/LBX# dummy_run


        Usage: <Amount> <Ext ID> <Pay Type> <Invoice Num> <Dep Dt><Time>

                Amount with no decimals (i.e. 3.18 should be input as 3318)
                Deposit date in format YYMMDD
                Deposit time in format HHMI

sdp1:/staging/billing/TAI/process/LBX#

	   * 2)  Place the input file, with the proper naming conventions, in the directory that has been configured in LBX_SOURCE_ID_REF as the directory where the LBX 'GET' process will pick it up to move it into the $ARBORDIR/lockbox/ready directory.
	   *     (this is normally taken care of by dummy_run, which is a wrapper to a c utility)
       * 3)  Run LBX in 'GET' mode (call test_upm_bct_LBX_workflow(taskName) method in UpmRunLbx.java)
       * 4)  Run LBX in 'PRO' (PROCESS) mode.
       * 		(call test_upm_bct_LBX_workflow(taskName) method in UpmRunLbx.java with 
       *       'PROCESS' input parameter)	
	   * 
	   * Also see slides 43-69 of http://us-dnv-sp01/sites/SQPM/PQA/E2E/Reference%20Test%20Procedures/BP%20Module%20Test%20Procedures.ppt
	   * for reference
	   * */
	             	            	            
/*	            result = "pass"; */
	        } catch (AlreadyRunException e) {
	        } catch (Exception e) {
	            broken_error.append(e.getMessage());
	            throw e;
	        }
	    }

	    @After
	    @Override
	    public void tearDown() {
	        //String result = super.testResult(broken_error);
	        String testId = this.getClass().getSimpleName().toString();
	        super.logResults(bugId, app, version, testId, result, deployMode, browser);
	        super.tearDown();
	    }

	}
