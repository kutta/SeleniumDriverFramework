package com.comverse.css.b2b.nsa;

import org.junit.After;
import org.junit.Before;

import com.comverse.css.common.AlreadyRunException;
import com.comverse.css.common.CSSSeleneseTestCase;
import com.comverse.css.common.Prep;
import com.comverse.css.common.User;
import com.comverse.css.common.Wait;
import com.comverse.css.b2b.Nsa;
import com.comverse.css.b2b.Navigation;

public class NSA0070_Set_Service_Address extends CSSSeleneseTestCase {

    private StringBuffer broken_error = new StringBuffer();
    private String bugId = "NoBug";
    private String app = "";
    private String version = "";
    private String deployMode = "CV";
    private String browser = "";
    private String result = "fail";

    @Before
    @Override
    public void setUp() {
        String htmlFileName = this.getClass().getSimpleName().toString();
        super.setUp(htmlFileName);
    }

    public void testNSA0070_Set_Service_Address() throws Exception {
        try {
            Prep b2bApplication = new Prep(selenium);
            User myUser = new User(selenium);
            Nsa doNsa = new Nsa(selenium);
            Wait waiting = new Wait(selenium);
            Navigation doNav = new Navigation(selenium);
            long ts = b2bApplication.generateTimeStamp();

            app = b2bApplication.launchB2B();
            version = b2bApplication.getBuildNumber(app, this.getClass().getSimpleName().toString());
            browser = b2bApplication.getBrowserAgent();

            myUser.loginB2BAdmin();

            selenium.click("//a[@id='mnu_ACCOUNT']");
            waiting.forPageToLoad();

            selenium.click("firstYouCanconvergentNewAccountMenu");
            waiting.forPageToLoad();

            selenium.click("//input[@value='Continue >']");
            waiting.forPageToLoad();
            doNsa.modifyAccountDetails("USD");
            doNsa.reviewCustomerData();
            doNsa.chooseOffer("DIY - Monthly Subscription Prime Offering");
            doNsa.selectHandSet("");

            assertTrue(selenium.getTitle().equals("Enter your subscription details"));
            selenium.type("firstName", "SubFN" + ts);
            selenium.type("lastName", "SubLN" + ts);
            selenium.type("streetNumber", "6666");
            selenium.type("streetNumberSuffix", "Bis");
            selenium.select("streetDirectionalPrefix", "label=north");
            selenium.type("streetName", "SubStreet");
            selenium.select("streetSuffix", "label=road");
            selenium.select("streetDirectionalPostfix", "label=south");
            selenium.select("unitType", "label=building");
            selenium.type("unitNumber", "7777");
            selenium.type("home_city", "SubCity");
            selenium.type("county", "IDF");
            selenium.type("home_zip", "SubZIP");
            selenium.type("extendedZipCode", "SubExt");
            selenium.select("home_country", "label=United States");
            selenium.select("home_state", "label=Florida");
            selenium.click("//input[@value='Continue >']");

            doNsa.selectOffersForYourSubscriber();
            doNsa.checkMyBasketContent("DIY - Monthly Subscription Prime Offering");
            doNsa.checkoutReview();
            String order_number = doNsa.checkoutConfirmation(app);

            doNsa.waitForAccountOrdersDone(order_number);
          

            doNav.gotoAccountDashboard();

            doNav.SearchSubscriber(ts);

            assertEquals("Subscriber details", selenium.getTitle());
            assertTrue(selenium.isTextPresent("6666"));
            assertTrue(selenium.isTextPresent("Bis"));
            assertTrue(selenium.isTextPresent("SubStreet"));
            assertTrue(selenium.isTextPresent("RD"));
            assertTrue(selenium.isTextPresent("SubCity"));
            assertTrue(selenium.isTextPresent("SubZIP"));
            assertTrue(selenium.isTextPresent("United States"));
            assertTrue(selenium.isTextPresent("Florida"));

            result = "pass";
        } catch (AlreadyRunException e) {
        } catch (Exception e) {
            broken_error.append(e.getMessage());
            throw e;
        }
    }

    @After
    @Override
    public void tearDown() {
        //String result = super.testResult(broken_error);
        String testId = this.getClass().getSimpleName().toString();
        super.logResults(bugId, app, version, testId, result, deployMode, browser);
        super.tearDown();
    }
}
