package com.comverse.css.b2b.rbm;

import org.junit.After;
import org.junit.Before;

import com.comverse.css.b2b.Navigation;
import com.comverse.css.b2b.Nsa;
import com.comverse.css.common.AlreadyRunException;
import com.comverse.css.common.CSSSeleneseTestCase;
import com.comverse.css.common.Prep;
import com.comverse.css.common.User;
import com.comverse.css.common.Wait;

public class RBM0060_Reconfigure_shadow_balance extends CSSSeleneseTestCase {

    private StringBuffer broken_error = new StringBuffer();
    private String bugId = "NoBug";
    private String app = "";
    private String version = "";
    private String deployMode = "CV";
    private String browser = "";
    private String result = "fail";

    @Before
    @Override
    public void setUp() {
        String htmlFileName = this.getClass().getSimpleName().toString();
        super.setUp(htmlFileName);
    }

    public void testRBM0060_Reconfigure_shadow_balance() throws Exception {
        try {
            Prep b2bApplication = new Prep(selenium);
            User myUser = new User(selenium);

            Nsa doNsa = new Nsa(selenium);
            Navigation doNav = new Navigation(selenium);
            Wait waiting = new Wait(selenium);

            app = b2bApplication.launchB2B();
            version = b2bApplication.getBuildNumber(app, this.getClass().getSimpleName().toString());
            browser = b2bApplication.getBrowserAgent();

            myUser.loginB2BAdmin();

            selenium.click("//a[@id='mnu_ACCOUNT']");
            waiting.forPageToLoad();

            doNav.AddAccountOffer();

            doNsa.selectOffersForYourAccount("Generally Available Account level - With Shared Balances");
            doNsa.checkMyBasketContent("Generally Available Account level - With Shared Balances");
            doNsa.checkoutReview();
            waiting.forPageToLoad();

            assertEquals("Checkout Confirmation", selenium.getTitle());
            assertTrue(selenium.isTextPresent("Your order has been submitted."));
            selenium.click("submit");
            waiting.forPageToLoad();

            doNsa.waitForAccountRequestDone();

            doNav.gotoSubscriberPage();

            selenium.click("viewBalances");
            waiting.forPageToLoad();

            assertEquals("View Balance", selenium.getTitle());
            selenium.click("link=Configure");
            waiting.forPageToLoad();

            assertEquals("Configure Balance", selenium.getTitle());
            selenium.type("configuredLimit", "666");
            selenium.click("submit_reconfigure_limit");
            waiting.forPageToLoad();

            waiting.forTextPresent("Balance configured");
            assertEquals("Balance configured", selenium.getTitle());
            assertTrue(selenium.isTextPresent("The \"Configure Balance\" request has been submitted successfully."));
            selenium.click("//input[@value='OK']");
            waiting.forPageToLoad();

            assertEquals("View Balance", selenium.getTitle());
            assertTrue(selenium.isTextPresent("666"));

            result = "pass";
        } catch (AlreadyRunException e) {
        } catch (Exception e) {
            broken_error.append(e.getMessage());
            throw e;
        }
    }

    @After
    @Override
    public void tearDown() {
        //String result = super.testResult(broken_error);
        String testId = this.getClass().getSimpleName().toString();
        super.logResults(bugId, app, version, testId, result, deployMode, browser);
        super.tearDown();
    }

}