package com.comverse.css.csr.camp;

import java.text.SimpleDateFormat;
import java.util.Date;
import com.comverse.css.common.PropertyHelper;

import org.junit.After;
import org.junit.Before;

import com.comverse.css.common.AlreadyRunException;
import com.comverse.css.common.CSSSeleneseTestCase;
import com.comverse.css.common.Prep;
import com.comverse.css.common.User;
import com.comverse.css.common.Wait;
import com.comverse.css.pos.Nca;

public class UC07_Search_Campaigns_targeting_account_subscriber extends CSSSeleneseTestCase {

    private StringBuffer broken_error = new StringBuffer();
    private String bugId = "NoBug";
    private String app = "";
    private String version = "";
    private String deployMode = "CV";
    private String browser = "";
    private String result = "fail";

    @Before
    @Override
    public void setUp() {
        String htmlFileName = this.getClass().getSimpleName().toString();
        super.setUp(htmlFileName);
    }

    public void testUC07_Search_Campaigns_targeting_account_subscriber() throws Exception {
        try {
            Prep csrApplication = new Prep(selenium);
            User myUser = new User(selenium);
            Nca doNca = new Nca(selenium);
            Wait waiting = new Wait(selenium);
            PropertyHelper propsHelper = new PropertyHelper();
            String camp = propsHelper.getAccountProperties("TargetedCampaign.Account");

            Date date = new Date();
            SimpleDateFormat myformat = new SimpleDateFormat("MM/dd/yyyy");

            app = csrApplication.launchCSR();
            version = csrApplication.getBuildNumber(app, this.getClass().getSimpleName().toString());
            browser = csrApplication.getBrowserAgent();

            myUser.loginCSRUser();
            doNca.waitForExistingAccountSynchronised(camp);

            selenium.click("//a[@id='mnu_LEADS_CAMPAIGNS']");
            waiting.forPageToLoad();

            assertEquals("List marketing profiles", selenium.getTitle());
            selenium.click("//a[@id='smnu_TARGETED_CAMPAIGNS']");
            waiting.forPageToLoad();

            assertEquals("Targeted Campaigns", selenium.getTitle());
            assertTrue(selenium.isTextPresent("2 Campaign(s) found"));
            selenium.click("//form[@id='form_campaign_search']/div/a");
            assertTrue(selenium.isTextPresent("Search Criteria"));
            selenium.type("//input[@id='campaignCode']", "a");
            selenium.click("//input[@value='Search' and @value='Search' and @type='submit']");
            waiting.forPageToLoad();

            assertTrue(selenium.isTextPresent("No campaign found"));
            selenium.type("//input[@id='campaignCode']", "email*");
            selenium.click("//input[@value='Search' and @value='Search' and @type='submit']");
            waiting.forPageToLoad();
            assertTrue(selenium.isTextPresent("2 Campaign(s) found"));
            selenium.click("//input[@id='accepted']");
            selenium.click("//input[@id='offered']");
            selenium.click("//input[@value='Search' and @value='Search' and @type='submit']");
            waiting.forPageToLoad();

            assertTrue(selenium.isTextPresent("No campaign found"));
            selenium.click("//input[@id='offered']");
            selenium.click("//input[@id='byDispositionDate']");
            selenium.type("//input[@id='startDate']", myformat.format(date));
            selenium.click("//input[@value='Search' and @value='Search' and @type='submit']");
            waiting.forPageToLoad();

            assertTrue(selenium.isTextPresent("No campaign found"));
            selenium.click("//input[@value='Reset']");
            selenium.click("//input[@id='byDispositionDate']");
            selenium.click("//input[@value='Search' and @value='Search' and @type='submit']");
            waiting.forPageToLoad();
            assertTrue(selenium.isTextPresent("2 Campaign(s) found"));

            result = "pass";
        } catch (AlreadyRunException e) {
        } catch (Exception e) {
            broken_error.append(e.getMessage());
            throw e;
        }
    }

    @After
    @Override
    public void tearDown() {
        //String result = super.testResult(broken_error);
        String testId = this.getClass().getSimpleName().toString();
        super.logResults(bugId, app, version, testId, result, deployMode, browser);
        super.tearDown();
    }

}