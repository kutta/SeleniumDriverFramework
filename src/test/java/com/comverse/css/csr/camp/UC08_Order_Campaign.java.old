package com.comverse.css.csr.camp;

import com.comverse.css.common.PropertyHelper;

import org.junit.After;
import org.junit.Before;

import com.comverse.css.common.AlreadyRunException;
import com.comverse.css.common.CSSSeleneseTestCase;
import com.comverse.css.common.Prep;
import com.comverse.css.common.User;
import com.comverse.css.common.Wait;
import com.comverse.css.pos.Nca;
import com.comverse.css.pos.Nsa;

public class UC08_Order_Campaign extends CSSSeleneseTestCase {

    private StringBuffer broken_error = new StringBuffer();
    private String bugId = "NoBug";
    private String app = "";
    private String version = "";
    private String deployMode = "CV";
    private String browser = "";
    private String result = "fail";

    @Before
    @Override
    public void setUp() {
        String htmlFileName = this.getClass().getSimpleName().toString();
        super.setUp(htmlFileName);
    }

    public void testUC08_Order_Campaign() throws Exception {
        try {
            Prep csrApplication = new Prep(selenium);
            User myUser = new User(selenium);
            Nca doNca = new Nca(selenium);
            Nsa doNsa = new Nsa(selenium);
            Wait waiting = new Wait(selenium);
            PropertyHelper propsHelper = new PropertyHelper();
            String camp = propsHelper.getAccountProperties("TargetedCampaign.Account");

            app = csrApplication.launchCSR();
            version = csrApplication.getBuildNumber(app, this.getClass().getSimpleName().toString());
            browser = csrApplication.getBrowserAgent();

            myUser.loginCSRUser();
            doNca.waitForExistingAccountSynchronised(camp);

            selenium.click("//a[@id='mnu_LEADS_CAMPAIGNS']");
            waiting.forPageToLoad();
            assertEquals("List marketing profiles", selenium.getTitle());
            selenium.click("//a[@id='smnu_TARGETED_CAMPAIGNS']");
            waiting.forPageToLoad();
            assertEquals("Targeted Campaigns", selenium.getTitle());
            assertTrue(selenium.isTextPresent("2 Campaign(s) found"));

            selenium.click("//tr[@id='yui-rec2']/td[8]/div/a/img");
            waiting.forPageToLoad();
            waiting.forTextPresent("Select offers for your Subscriber");
            assertEquals("Select offers for your Subscriber", selenium.getTitle());
            assertTrue(selenium.isTextPresent("This campaign is eligible for existing account or subscriber"));
            doNca.selectOffersForYourSubscriber("Residential - SMS/MMS Pack.");
            waiting.forPageToLoad();

            if (selenium.getTitle().equals("Configure Offers")) {
                selenium.click("//input[@value='Continue >']");
                waiting.forPageToLoad();
            }
            assertEquals("My Basket", selenium.getTitle());
            selenium.click("//input[@name='checkout']");

            waiting.forTextPresent("Campaign Review");
            assertTrue(selenium.isTextPresent("Campaign Review"));
            selenium.click("//input[@value='Continue']");

            doNca.checkoutReview();
            doNca.checkoutConfirmation(app);

            doNsa.waitForSubscriberRequestDone();

            waiting.forTextPresent("Offered");

            result = "pass";
        } catch (AlreadyRunException e) {
        } catch (Exception e) {
            broken_error.append(e.getMessage());
            throw e;
        }
    }

    @After
    @Override
    public void tearDown() {
        //String result = super.testResult(broken_error);
        String testId = this.getClass().getSimpleName().toString();
        super.logResults(bugId, app, version, testId, result, deployMode, browser);
        super.tearDown();
    }

}