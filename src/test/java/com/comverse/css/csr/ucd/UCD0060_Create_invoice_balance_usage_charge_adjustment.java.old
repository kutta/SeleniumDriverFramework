package com.comverse.css.csr.ucd;

import com.comverse.css.common.PropertyHelper;

import org.junit.After;
import org.junit.Before;

import com.comverse.css.common.AlreadyRunException;
import com.comverse.css.common.CSSSeleneseTestCase;
import com.comverse.css.common.Prep;
import com.comverse.css.common.User;
import com.comverse.css.common.Wait;
import com.comverse.css.pos.Nca;

public class UCD0060_Create_invoice_balance_usage_charge_adjustment extends CSSSeleneseTestCase {

    private StringBuffer broken_error = new StringBuffer();
    private String bugId = "NoBug";
    private String app = "";
    private String version = "";
    private String deployMode = "CV";
    private String browser = "";
    private String result = "fail";

    @Before
    @Override
    public void setUp() {
        String htmlFileName = this.getClass().getSimpleName().toString();
        super.setUp(htmlFileName);
    }

    public void testUCD0060_Create_invoice_balance_usage_charge_adjustment() throws Exception {
        try {
            Prep csrApplication = new Prep(selenium);
            User myUser = new User(selenium);
            Nca doNca = new Nca(selenium);
            Wait waiting = new Wait(selenium);
            PropertyHelper propsHelper = new PropertyHelper();
            String Invoice = propsHelper.getAccountProperties("Invoice.Adjustment");

            app = csrApplication.launchCSR();
            version = csrApplication.getBuildNumber(app, this.getClass().getSimpleName().toString());
            browser = csrApplication.getBrowserAgent();

            myUser.loginCSRAdmin();
            doNca.checkForExistingBasketAndDiscard();
            doNca.waitForExistingAccountSynchronised(Invoice);

            selenium.click("mnu_BILLS_PAYMENTS");
            waiting.forPageToLoad();

            assertEquals("View invoices", selenium.getTitle());
            assertTrue(selenium.isTextPresent("invoices found"));
            assertTrue(selenium.isTextPresent("Last invoice"));
            selenium.click("//table[@id='listInvoices']/tbody/tr[2]/td[1]/a[1]");

            waiting.forTextPresent("View invoice details");
            selenium.click("//tr[@id='yui-rec1']/td[1]/div/a");
            waiting.forTextPresent("View invoice balance details");
            assertTrue(selenium.isTextPresent("Adjustments"));

            selenium.click("//a[@id='create_adjust']");
            waiting.forTextPresent("Add invoice balance adjustment - details");
            assertTrue(selenium.isTextPresent("Adjustment details"));
            assertTrue(selenium.isTextPresent("Adjustment description"));
            selenium.select("//select[@id='adjustmentReason']", "label=Service termination");
            selenium.type("//input[@id='adjustmentAmountCurrency']", "0.01");
            selenium.click("//input[@value='Continue']");
            waiting.forTextPresent("Add adjustment - review");
            assertTrue(selenium.isTextPresent("Miscellaneous Adjustment"));
            assertTrue(selenium.isTextPresent("Service termination"));
            assertTrue(selenium.isTextPresent("0.01"));
            selenium.click("//input[@value='Cancel']");
            waiting.forTextPresent("View invoice balance details");
            selenium.click("//a[@id='create_adjust']");
            waiting.forTextPresent("Add invoice balance adjustment - details");
            selenium.select("//select[@id='adjustmentReason']", "label=Service termination");
            selenium.type("//input[@id='adjustmentAmountCurrency']", "0.01");
            selenium.click("//input[@value='Continue']");
            waiting.forTextPresent("Add adjustment - review");
            assertTrue(selenium.isTextPresent("Miscellaneous Adjustment"));
            assertTrue(selenium.isTextPresent("Service termination"));
            assertTrue(selenium.isTextPresent("0.01"));
            selenium.click("//input[@value='Back']");
            waiting.forTextPresent("Add invoice balance adjustment - details");
            selenium.select("//select[@id='adjustmentReason']", "label=Service termination");
            selenium.type("//input[@id='adjustmentAmountCurrency']", "0.01");
            selenium.click("//input[@value='Continue']");
            waiting.forTextPresent("Add adjustment - review");
            assertTrue(selenium.isTextPresent("Miscellaneous Adjustment"));
            assertTrue(selenium.isTextPresent("Service termination"));
            assertTrue(selenium.isTextPresent("0.01"));
            selenium.click("//input[@value='Confirm']");
            waiting.forTextPresent("Add adjustment - confirmation");
            assertTrue(selenium.isTextPresent("Your request to add the above adjustment has been registered."));
            selenium.click("//input[@value='OK']");
            waiting.forTextPresent("View invoice balance details");
            assertTrue(selenium.isTextPresent("Miscellaneous Adjustment"));
            assertTrue(selenium.isTextPresent("Service termination"));
            assertTrue(selenium.isTextPresent("0.01"));

            result = "pass";
        } catch (AlreadyRunException e) {
        } catch (Exception e) {
            broken_error.append(e.getMessage());
            throw e;
        }
    }

    @After
    @Override
    public void tearDown() {
        //String result = super.testResult(broken_error);
        String testId = this.getClass().getSimpleName().toString();
        super.logResults(bugId, app, version, testId, result, deployMode, browser);
        super.tearDown();
    }

}