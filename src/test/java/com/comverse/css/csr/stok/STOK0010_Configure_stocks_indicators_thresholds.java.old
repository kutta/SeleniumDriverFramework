package com.comverse.css.csr.stok;

import org.junit.After;
import org.junit.Before;

import com.comverse.css.common.AlreadyRunException;
import com.comverse.css.common.CSSSeleneseTestCase;
import com.comverse.css.common.Prep;
import com.comverse.css.common.User;
import com.comverse.css.common.Wait;

public class STOK0010_Configure_stocks_indicators_thresholds extends CSSSeleneseTestCase {

    private StringBuffer broken_error = new StringBuffer();
    private String bugId = "NoBug";
    private String app = "";
    private String version = "";
    private String deployMode = "CV";
    private String browser = "";
    private String result = "fail";

    @Before
    @Override
    public void setUp() {
        String htmlFileName = this.getClass().getSimpleName().toString();
        super.setUp(htmlFileName);
    }

    public void testSTOK0010_Configure_stocks_indicators_thresholds() throws Exception {
        try {
            Prep csrApplication = new Prep(selenium);
            User myUser = new User(selenium);
            Wait waiting = new Wait(selenium);

            app = csrApplication.launchCSR();
            version = csrApplication.getBuildNumber(app, this.getClass().getSimpleName().toString());
            browser = csrApplication.getBrowserAgent();

            myUser.loginCSRAdmin();

            // Need to do some change in the CID:
            // Go to the SERVICE_INVENTORY table and pick SERVICE_ID
            // Add a new line with the SERVICE_ID in SERVICE_SUB_INVENTORY table

            selenium.click("mnu_MANAGE_REF");
            waiting.forPageToLoad();

            assertEquals("Search Inventory", selenium.getTitle());
            selenium.type("searchValue", "*");

            selenium.click("search_available");
            waiting.forPageToLoad();
            assertTrue(selenium.isTextPresent("No product matching this code"));

            selenium.click("search_unavailable");
            waiting.forPageToLoad();
            assertTrue(selenium.isTextPresent("The following items have either no thresholds or invalid ones. Enter valid values to update them."));
            selenium.click("//td[2]/input");
            selenium.type("//td[2]/input", "10");
            selenium.click("//td[3]/input");
            selenium.type("//td[3]/input", "100");
            selenium.click("//input[@value='Set Thresholds']");
            waiting.forPageToLoad();

            selenium.click("search_available");
            waiting.forPageToLoad();
            assertTrue(selenium.isTextPresent("Search Inventory from 1 to"));
            selenium.type("//td[2]/input", "");
            selenium.type("//td[3]/input", "");
            selenium.click("//input[@value='Modify']");
            selenium.waitForPageToLoad("30000");
            selenium.click("search_unavailable");
            waiting.forPageToLoad();

            selenium.click("search_unavailable");
            waiting.forPageToLoad();
            assertTrue(selenium.isTextPresent("The following items have either no thresholds or invalid ones. Enter valid values to update them."));

            result = "pass";
        } catch (AlreadyRunException e) {
        } catch (Exception e) {
            broken_error.append(e.getMessage());
            throw e;
        }
    }

    @After
    @Override
    public void tearDown() {
        //String result = super.testResult(broken_error);
        String testId = this.getClass().getSimpleName().toString();
        super.logResults(bugId, app, version, testId, result, deployMode, browser);
        super.tearDown();
    }

}