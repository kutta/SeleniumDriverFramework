package com.comverse.css.b2c.accs;

import org.junit.After;
import org.junit.Before;

import com.comverse.css.b2c.Navigation;
import com.comverse.css.common.CSSSeleneseTestCase; import com.comverse.css.common.AlreadyRunException;
import com.comverse.css.common.Prep;
import com.comverse.css.common.PropertyHelper;
import com.comverse.css.common.User;
import com.comverse.css.common.Wait;

public class ACCS0110_Unlock extends CSSSeleneseTestCase {

    private StringBuffer broken_error = new StringBuffer();
    private String bugId = "NoBug";
    private String app = "";
    private String version = "";
    private String deployMode = "CV";
    private String browser = ""; private String result = "fail";

    @Before
    @Override
    public void setUp() {

        String htmlFileName = this.getClass().getSimpleName().toString();

        super.setUp(htmlFileName);

    }

    public void testACCS0110_Unlock() throws Exception {
        try {
            Prep b2cApplication = new Prep(selenium);
            Wait waiting = new Wait(selenium);
            User myUser = new User(selenium);
            Navigation navigate = new Navigation(selenium);
            PropertyHelper propsHelper = new PropertyHelper();

            app = b2cApplication.launchB2C();
            version = b2cApplication.getBuildNumber(app, this.getClass().getSimpleName().toString());
            browser = b2cApplication.getBrowserAgent();

            long unique_ID = b2cApplication.generateTimeStamp();
            String CustomerName = "$" + unique_ID;
            String MemberPassword;

            String login = propsHelper.readLoginFromFile();
            String password = propsHelper.readPasswordFromFile();

            app = b2cApplication.launchB2C();
            version = b2cApplication.getBuildNumber(app, this.getClass().getSimpleName().toString());
            browser = b2cApplication.getBrowserAgent();

            myUser.loginB2CUser(login, password);

            MemberPassword = myUser.createNewCustomerResidentialMember(CustomerName);
            myUser.logout();

            MemberPassword = myUser.loginB2CUserWithPasswordChange(CustomerName, MemberPassword);

            assertTrue(selenium.isTextPresent("fn" + CustomerName));
            assertTrue(selenium.isTextPresent("ln" + CustomerName));
            assertTrue(selenium.isTextPresent("Welcome to Your Personalized Workspace"));

            myUser.logout();

            myUser.loginSeniorAcctManager();

            navigate.gotoSearchMember();

            selenium.click("smnu_SEARCH_BY_MEMBER");

            waiting.forPageToLoad();

            assertTrue(selenium.isTextPresent("Search Member"));
            selenium.type("p-L1:8-L3:1470", "ln" + CustomerName);
            selenium.click("//input[@value='Search']");
             waiting.forPageToLoad();
            waiting.forTextPresent("1 member");
            selenium.click("link=fn" + CustomerName + " ln" + CustomerName);
            waiting.forTextPresent("All rights reserved");
            selenium.click("smnu_LOGIN");
            waiting.forTextPresent("All rights reserved");
            selenium.click("youcan_LOCK_LOGIN");
            waiting.forTextPresent("All rights reserved");
            assertTrue(selenium.isTextPresent("Lock Login"));

           selenium.click("//input[@value='Confirm']");

            waiting.forTextPresent("All rights reserved");
            assertTrue(selenium.isTextPresent("The login of user fn" + CustomerName + " ln" + CustomerName + " has been locked."));

            myUser.logout();

            selenium.type("login", CustomerName);
            selenium.type("password", MemberPassword);
            selenium.click("LoginButton");

            waiting.forTextPresent("All rights reserved");

            assertTrue(selenium.isTextPresent("Your login has been locked"));

            myUser.loginSeniorAcctManager();

            navigate.gotoSearchMember();

            waiting.forTextPresent("All rights reserved");

            assertTrue(selenium.isTextPresent("Search Member"));
            selenium.type("p-L1:8-L3:1470", "ln" + CustomerName);
            selenium.click("//input[@value='Search']");

            waiting.forTextPresent("1 member");
            selenium.click("link=fn" + CustomerName + " ln" + CustomerName);
            waiting.forTextPresent("All rights reserved");
            selenium.click("smnu_LOGIN");

            waiting.forPageToLoad();
            selenium.click("youcan_UNLOCK_LOGIN");
            waiting.forPageToLoad();
            selenium.isTextPresent("Unlock Login");
            selenium.click("//input[@value='Confirm']");
            waiting.forPageToLoad();

            assertTrue(selenium.isTextPresent("Unlock done"));
            assertTrue(selenium.isTextPresent("successfully unlocked."));

            selenium.click("//input[@value='Cancel']");
            waiting.forPageToLoad();

            myUser.logout();

            selenium.type("login", CustomerName);
            selenium.type("password", MemberPassword);
            selenium.click("LoginButton");
            waiting.forPageToLoad();
        

            assertTrue(selenium.isTextPresent("fn" + CustomerName));
            assertTrue(selenium.isTextPresent("ln" + CustomerName));

        result = "pass"; } catch (AlreadyRunException e) {         } catch (Exception e) {
            broken_error.append(e.getMessage());
            throw e;
        }

    }

    @After
    @Override
    public void tearDown() {

        //String result = super.testResult(broken_error);
        String testId = this.getClass().getSimpleName().toString();
        super.logResults(bugId, app, version, testId, result, deployMode, browser);

        super.tearDown();
    }
}
